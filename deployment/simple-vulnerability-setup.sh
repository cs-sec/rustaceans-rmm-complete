#!/bin/bash

# Simple RMM Server with Vulnerability Scanning Setup
# File-based storage, no database dependencies

echo "=== Simple RMM Vulnerability Scanning Setup ==="

# Create project directory
mkdir -p SecurityRMM
cd SecurityRMM

# Initialize Cargo project
echo "Creating Rust project..."
cat > Cargo.toml << 'EOF'
[package]
name = "simple-rmm-server"
version = "0.1.0"
edition = "2021"

[[bin]]
name = "simple-rmm-server"
path = "src/simple_server.rs"

[dependencies]
actix-web = "4.4"
actix-files = "0.6"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.0", features = ["full"] }
chrono = { version = "0.4", features = ["serde"] }
uuid = { version = "1.0", features = ["serde", "v4"] }
anyhow = "1.0"
env_logger = "0.10"
log = "0.4"
tracing = "0.1"
sha2 = "0.10"
hex = "0.4"
EOF

# Create src directory
mkdir -p src

# Download auth module
echo "Downloading authentication module..."
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/src/auth.rs > src/auth.rs

# Download simple server with vulnerability scanning
echo "Downloading vulnerability scanning server..."
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/src/simple_server.rs > src/simple_server.rs

# Create static directory and files
mkdir -p static

echo "Downloading dashboard files..."
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/static/index.html > static/index.html
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/static/login.html > static/login.html
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/static/style.css > static/style.css
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/static/app.js > static/app.js

# Create deployment directory
mkdir -p deployment/windows

echo "Downloading Windows agent with vulnerability scanning..."
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/deployment/windows/rmm-agent-with-scanning.ps1 > deployment/windows/rmm-agent-with-scanning.ps1
curl -sSL https://raw.githubusercontent.com/cs-sec/rustaceans-rmm-complete/main/deployment/windows/deploy-vulnerability-agent.bat > deployment/windows/deploy-vulnerability-agent.bat

# Remove any database references from the server code
echo "Cleaning server code..."
if [ -f src/simple_server.rs ]; then
    # Remove database-related lines that might cause compilation errors
    sed -i '/mod database;/d' src/simple_server.rs
    sed -i '/mod vulnerability_db;/d' src/simple_server.rs
    sed -i '/use database::/d' src/simple_server.rs
    sed -i '/use vulnerability_db::/d' src/simple_server.rs
    sed -i '/DatabaseManager/d' src/simple_server.rs
    sed -i '/sqlx::/d' src/simple_server.rs
    sed -i '/PgPool/d' src/simple_server.rs
fi

# Build the project
echo "Building RMM server..."
cargo build --bin simple-rmm-server

if [ $? -eq 0 ]; then
    echo ""
    echo "=== SUCCESS: RMM Server with Vulnerability Scanning Ready! ==="
    echo ""
    echo "Features included:"
    echo "✓ Real-time client monitoring"
    echo "✓ Comprehensive vulnerability scanning"
    echo "✓ Windows security assessment"
    echo "✓ Firewall and antivirus monitoring"
    echo "✓ User account security checks"
    echo "✓ Network configuration analysis"
    echo "✓ Service security evaluation"
    echo ""
    echo "To start the server:"
    echo "  cargo run --bin simple-rmm-server"
    echo ""
    echo "Server will be available at: http://0.0.0.0:5000"
    echo "Login with: admin / admin123"
    echo ""
    echo "Windows Agent Deployment:"
    echo "  Upload deployment/windows/deploy-vulnerability-agent.bat to Windows systems"
    echo "  Run as Administrator with your server URL"
    echo ""
    echo "Building release version..."
    cargo build --release --bin simple-rmm-server
    echo ""
    echo "Release binary available at: ./target/release/simple-rmm-server"
    echo ""
else
    echo ""
    echo "=== Build failed - checking for issues ==="
    echo "Attempting to fix remaining database references..."
    
    # More aggressive cleanup
    if [ -f src/simple_server.rs ]; then
        grep -n "database\|sqlx\|PgPool" src/simple_server.rs || echo "No database references found"
    fi
    
    echo ""
    echo "Please check the build output above for specific errors."
    echo "The server code may need manual cleanup of database references."
fi